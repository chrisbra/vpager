#!/bin/sh
#
# Shell script to be used as pager from inside Vims Terminal
#
# The output will be send to Vim to be opened in a new buffer
#
# Author: Christian Brabandt <cb@256bit.org>
# Repository: https://github.com/chrisbra/vpager
# License: BSD
VERSION=0.2
pre_init() { #{{{1 Set some variables that will always be read
#set -x
red=$(tput setaf 1)
green=$(tput setaf 2)
reset=$(tput sgr0)
}
check_python() { # Check existence of python, because is needed for json encoding {{{1
# Check for existence of python
if ! which python > /dev/null ; then
  echo "Python does not exist"
  exit 2
fi
}
init(){ #{{{1 initialize some Variables needed to control options send to Vim
  set bell-style none
  ESC=`printf "\e"`
  BELL=`printf "\a"`
  PRE=${ESC}']51;["call", "Tapi_Vpager", '
  POST=']'${BELL}
  VIMOPT="${VIMOPT:=}"
  NEW="${NEW:=}"
  VERT="${VERT:=}"

  check_python
}
vim_setup(){ #{{{1 Send initial options to Vim.
  ARG=""
  if [ -n "${NEW}" ]; then
    ARG="${ARG}\"%%d _\""
  fi
  if [ -n "${VIMOPT}" ]; then
    if [ -n "${ARG}" ]; then
      # add trailing comma
      ARG="${ARG},";
    fi
    ARG="${ARG}\"setl ${VIMOPT}\"";
  fi
  if [ -n "${VERT}" ]; then
    if [ -n "${ARG}" ]; then
      # add trailing comma
      ARG="${ARG},";
    fi
    ARG="${ARG}\"wincmd H\"";
  fi
  ARG="[\"vpager_setup\", ${ARG:=\"\"}]";
  printf "${ESC}]51;[\"call\", \"Tapi_Vpager_setup\", ${ARG}]${BELL}"
}
json_escape() { #{{{1 JSON Escape the input, uses python
  printf '%s' "$1" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
}
main(){ #{{{1 Send input to Vim
  # The interface is something like this:
  # <ESC>]51;["call", "Tapi_Vpager", [args]]
  # with args a list with the following elements:
  # 0] vpager
  # 1] output to be copied into a vim buffer, one item per line
  while IFS= read -r line; do
    escaped=`json_escape "$line"`
    printf "${PRE} [\"vpager\", %s]${POST}${line}\n" "$escaped"
  done < "$INPUT"
}
usage() { #{{{1 Print Usage
cat << EOF

SYNOPSIS
    `basename $0` [-nV -C option] [File]
    `basename $0` [-h|-v]

EOF
}
display_help(){ #{{{1 Print help
cat << EOF
NAME 
    This script `basename $0` can be used as pager from inside Vims built-in
    terminal. The output will be copied to a new buffer in Vim.

    If it is not run from within vim, will simply copy the input to the output.
EOF
usage
cat << EOF
    -v	display version
    -h	display help
    -C	Pass options to Vim. Can be used to e.g. set the filetype for
        correct syntax highlighting.
    -n  Clear the previous buffer in Vim
    -V  Open a vertical split window in Vim

EXAMPLES
  git diff | vpager -nC 'ft=diff'

  Copies the output of git diff into a buffer inside Vim. Any previous
  output in the buffer will be cleared and the filetype will be set
  to "diff", for proper syntax highlighting.

EOF
}
getVersion(){ #{{{1 Print version
cat <<EOF
$(basename "${0}") Version: ${VERSION}
EOF
}
check_input() { #{{{ Check if reading stdin or a file
  INPUT="${INPUT:=/dev/stdin}"
  if [ -t 0 -a -z "$1" ]; then
    printf "`basename $0`: ${red}Error${reset}: no input available.\n"
    usage
    exit 1;
  elif [ -n "$1" ]; then
    INPUT=$1
  fi
}
#{{{1End of sub-routine, main flow
# Process commandline parameters
while getopts "nhvVC:" ARGS; do
  case ${ARGS} in
    v) getVersion; exit 0 ;;
    C) VIMOPT=${OPTARG} ;;
    n) NEW="1" ;;
    V) VERT="1" ;;
    h) display_help; exit 0 ;;
    *) display_help; exit 1 ;;
  esac
done

shift `expr ${OPTIND} - 1`

pre_init
check_input $1

if [ -z "${VIM_TERMINAL+x}" ]; then
  # variable unset, not running inside Vim, so simply dump the input
  while IFS= read -r line; do
    printf "%s\n" "$line"
  done < "$INPUT"
else
  init
  vim_setup
  main
fi
